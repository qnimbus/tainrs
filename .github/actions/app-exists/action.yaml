---
# yaml-language-server: $schema=https://json.schemastore.org/github-action.json
name: App Exists
description: Check if a container package exists in the GitHub Container Registry
# Required permissions in calling workflow:
# permissions:
#   packages: read

inputs:
  app:
    description: Name of the container package to check
    required: true

outputs:
  exists:
    description: Boolean string ('true' or 'false') indicating if the package exists
    value: ${{ steps.app.outputs.exists }}

runs:
  using: composite
  steps:
    - name: App Exists
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      id: app
      env:
        APP: ${{ inputs.app }}
      with:
        script: |-
          const app = process.env.APP;
          
          // Input validation
          if (!app || app.trim() === '') {
            core.setFailed('App name cannot be empty');
            return;
          }
          
          core.info(`Checking if container package '${app}' exists for ${context.repo.owner}`);

          const { data: user } = await github.rest.users.getByUsername({
              username: context.repo.owner,
          });

          let pkg;
          if (user.type === 'Organization') {
              try {
                  const { data } = await github.rest.packages.getPackageForOrganization({
                      package_type: 'container',
                      package_name: app,
                      org: context.repo.owner,
                  });
                  pkg = data;
              } catch (error) {
                  if (error.status === 404) {
                      // Package not found - this is expected
                  } else if (error.status === 403) {
                      core.warning(`Access denied when checking package '${app}'. Package may be private or permissions insufficient.`);
                  } else {
                      throw error;
                  }
              }
          } else {
              try {
                  const { data } = await github.rest.packages.getPackageForUser({
                      package_type: 'container',
                      package_name: app,
                      username: context.repo.owner,
                  });
                  pkg = data;
              } catch (error) {
                  if (error.status === 404) {
                      // Package not found - this is expected
                  } else if (error.status === 403) {
                      core.warning(`Access denied when checking package '${app}'. Package may be private or permissions insufficient.`);
                  } else {
                      throw error;
                  }
              }
          }

          const exists = typeof pkg !== "undefined";
          core.info(`Package '${app}' ${exists ? 'exists' : 'does not exist'} in the registry`);
          core.setOutput('exists', exists);
